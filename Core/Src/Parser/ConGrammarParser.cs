//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConIntellisense.Core.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ConGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NEWLINE=2, VAR=3, CONST=4, LINECOMMENT=5, BLOCKCOMMENT=6, WHILE=7, 
		ENDWHILE=8, IF=9, ELSE=10, ELSEIF=11, ENDIF=12, EQUAL=13, NOTEQUAL=14, 
		LESS=15, LESSEQUAL=16, GREATER=17, GREATEREQUAL=18, ASSIGN=19, INITIALIZER=20, 
		INCLUDE=21, RUN=22, RETURN=23, IDENTIFIER=24, STRING=25, NUMBER=26, WS=27;
	public const int
		RULE_file = 0, RULE_block = 1, RULE_expression = 2, RULE_returnExp = 3, 
		RULE_commentExp = 4, RULE_includeExp = 5, RULE_runExp = 6, RULE_callExp = 7, 
		RULE_assignExp = 8, RULE_declarationExp = 9, RULE_declarationModifier = 10, 
		RULE_conditionalExp = 11, RULE_conditionalMultiExp = 12, RULE_whileExp = 13, 
		RULE_condition = 14, RULE_comparator = 15, RULE_literal = 16, RULE_vector = 17;
	public static readonly string[] ruleNames = {
		"file", "block", "expression", "returnExp", "commentExp", "includeExp", 
		"runExp", "callExp", "assignExp", "declarationExp", "declarationModifier", 
		"conditionalExp", "conditionalMultiExp", "whileExp", "condition", "comparator", 
		"literal", "vector"
	};

	private static readonly string[] _LiteralNames = {
		null, "'/'", null, "'var'", "'const'", null, null, "'while'", "'endWhile'", 
		"'if'", "'else'", "'elseIf'", "'endIf'", null, null, null, null, null, 
		null, "'->'", "'='", "'include'", "'run'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NEWLINE", "VAR", "CONST", "LINECOMMENT", "BLOCKCOMMENT", 
		"WHILE", "ENDWHILE", "IF", "ELSE", "ELSEIF", "ENDIF", "EQUAL", "NOTEQUAL", 
		"LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "ASSIGN", "INITIALIZER", 
		"INCLUDE", "RUN", "RETURN", "IDENTIFIER", "STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ConGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ConGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ConGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ConGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ConGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(ConGrammarParser.NEWLINE, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			block();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 37;
				Match(NEWLINE);
				}
			}

			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ConGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ConGrammarParser.NEWLINE, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << CONST) | (1L << LINECOMMENT) | (1L << BLOCKCOMMENT) | (1L << WHILE) | (1L << IF) | (1L << INCLUDE) | (1L << RUN) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 42;
					expression();
					}
				}

				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 45;
						Match(NEWLINE);
						State = 46;
						expression();
						}
						} 
					}
					State = 51;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationExpContext declarationExp() {
			return GetRuleContext<DeclarationExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpContext conditionalExp() {
			return GetRuleContext<ConditionalExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalMultiExpContext conditionalMultiExp() {
			return GetRuleContext<ConditionalMultiExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileExpContext whileExp() {
			return GetRuleContext<WhileExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentExpContext commentExp() {
			return GetRuleContext<CommentExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunExpContext runExp() {
			return GetRuleContext<RunExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeExpContext includeExp() {
			return GetRuleContext<IncludeExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnExpContext returnExp() {
			return GetRuleContext<ReturnExpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				assignExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				callExp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				declarationExp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				conditionalExp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				conditionalMultiExp();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 60;
				whileExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 61;
				commentExp();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 62;
				runExp();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 63;
				includeExp();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 64;
				returnExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ConGrammarParser.RETURN, 0); }
		public ReturnExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterReturnExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitReturnExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpContext returnExp() {
		ReturnExpContext _localctx = new ReturnExpContext(Context, State);
		EnterRule(_localctx, 6, RULE_returnExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINECOMMENT() { return GetToken(ConGrammarParser.LINECOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKCOMMENT() { return GetToken(ConGrammarParser.BLOCKCOMMENT, 0); }
		public CommentExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterCommentExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitCommentExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentExpContext commentExp() {
		CommentExpContext _localctx = new CommentExpContext(Context, State);
		EnterRule(_localctx, 8, RULE_commentExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==LINECOMMENT || _la==BLOCKCOMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(ConGrammarParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IncludeExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterIncludeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitIncludeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeExpContext includeExp() {
		IncludeExpContext _localctx = new IncludeExpContext(Context, State);
		EnterRule(_localctx, 10, RULE_includeExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(INCLUDE);
			State = 72;
			literal();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 73;
				literal();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(ConGrammarParser.RUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public RunExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterRunExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitRunExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunExpContext runExp() {
		RunExpContext _localctx = new RunExpContext(Context, State);
		EnterRule(_localctx, 12, RULE_runExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(RUN);
			State = 80;
			literal();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 81;
				literal();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ConGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public CallExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterCallExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitCallExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallExpContext callExp() {
		CallExpContext _localctx = new CallExpContext(Context, State);
		EnterRule(_localctx, 14, RULE_callExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(IDENTIFIER);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 88;
				literal();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ConGrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ConGrammarParser.IDENTIFIER, 0); }
		public AssignExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExpContext assignExp() {
		AssignExpContext _localctx = new AssignExpContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			callExp();
			State = 95;
			Match(ASSIGN);
			State = 96;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext declarationModifier() {
			return GetRuleContext<DeclarationModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ConGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALIZER() { return GetToken(ConGrammarParser.INITIALIZER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public DeclarationExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterDeclarationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitDeclarationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationExpContext declarationExp() {
		DeclarationExpContext _localctx = new DeclarationExpContext(Context, State);
		EnterRule(_localctx, 18, RULE_declarationExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			declarationModifier();
			State = 99;
			Match(IDENTIFIER);
			{
			State = 100;
			Match(INITIALIZER);
			State = 101;
			literal();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(ConGrammarParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ConGrammarParser.CONST, 0); }
		public DeclarationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationModifierContext declarationModifier() {
		DeclarationModifierContext _localctx = new DeclarationModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_declarationModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !(_la==VAR || _la==CONST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ConGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ConGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ConGrammarParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(ConGrammarParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ConGrammarParser.ELSE, 0); }
		public ConditionalExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterConditionalExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitConditionalExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpContext conditionalExp() {
		ConditionalExpContext _localctx = new ConditionalExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionalExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(IF);
			State = 106;
			condition();
			State = 107;
			Match(NEWLINE);
			State = 108;
			block();
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 109;
				Match(NEWLINE);
				State = 110;
				Match(ELSE);
				State = 111;
				Match(NEWLINE);
				State = 112;
				block();
				}
				break;
			}
			State = 115;
			Match(NEWLINE);
			State = 116;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalMultiExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ConGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ConGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ConGrammarParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(ConGrammarParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(ConGrammarParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(ConGrammarParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ConGrammarParser.ELSE, 0); }
		public ConditionalMultiExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalMultiExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterConditionalMultiExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitConditionalMultiExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalMultiExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalMultiExpContext conditionalMultiExp() {
		ConditionalMultiExpContext _localctx = new ConditionalMultiExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_conditionalMultiExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(IF);
			State = 119;
			condition();
			State = 120;
			Match(NEWLINE);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 121;
				Match(ELSEIF);
				State = 122;
				Match(NEWLINE);
				State = 123;
				block();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ELSEIF );
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 128;
				Match(NEWLINE);
				State = 129;
				Match(ELSE);
				State = 130;
				Match(NEWLINE);
				State = 131;
				block();
				}
				break;
			}
			State = 134;
			Match(NEWLINE);
			State = 135;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ConGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ConGrammarParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ConGrammarParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDWHILE() { return GetToken(ConGrammarParser.ENDWHILE, 0); }
		public WhileExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterWhileExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitWhileExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileExpContext whileExp() {
		WhileExpContext _localctx = new WhileExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(WHILE);
			State = 138;
			condition();
			State = 139;
			Match(NEWLINE);
			State = 140;
			block();
			State = 141;
			Match(NEWLINE);
			State = 142;
			Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ConGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(IDENTIFIER);
			State = 145;
			comparator();
			State = 146;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ConGrammarParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(ConGrammarParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ConGrammarParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(ConGrammarParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(ConGrammarParser.LESSEQUAL, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitComparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOTEQUAL) | (1L << LESSEQUAL) | (1L << GREATER) | (1L << GREATEREQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ConGrammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ConGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VectorContext vector() {
			return GetRuleContext<VectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ConGrammarParser.NUMBER, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_literal);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				vector();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153;
				Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(ConGrammarParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(ConGrammarParser.NUMBER, i);
		}
		public VectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.EnterVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IConGrammarListener typedListener = listener as IConGrammarListener;
			if (typedListener != null) typedListener.ExitVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConGrammarVisitor<TResult> typedVisitor = visitor as IConGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorContext vector() {
		VectorContext _localctx = new VectorContext(Context, State);
		EnterRule(_localctx, 34, RULE_vector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(NUMBER);
			State = 157;
			Match(T__0);
			State = 158;
			Match(NUMBER);
			State = 159;
			Match(T__0);
			State = 160;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\xA5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x32', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x35', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', '\x38', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x44', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'M', '\n', '\a', '\f', '\a', '\xE', '\a', 'P', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'U', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'X', '\v', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '\\', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '_', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', 't', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x6', '\xE', '\x7F', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 
		'\x80', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x87', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x9D', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '\x2', '\x5', '\x3', '\x2', '\a', '\b', '\x3', 
		'\x2', '\x5', '\x6', '\x4', '\x2', '\xF', '\x10', '\x12', '\x14', '\x2', 
		'\xA8', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'Y', '\x3', '\x2', '\x2', '\x2', '\x12', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x64', '\x3', '\x2', '\x2', '\x2', '\x16', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x18', 'k', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x92', '\x3', '\x2', '\x2', '\x2', ' ', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x9C', '\x3', '\x2', '\x2', '\x2', '$', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', '\x4', '\x3', '\x2', '\'', 
		')', '\a', '\x4', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', '\x2', '\x2', '\x3', '+', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ',', '.', '\x5', '\x6', '\x4', '\x2', '-', ',', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', '\x4', '\x2', '\x2', '\x30', '\x32', 
		'\x5', '\x6', '\x4', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\a', '\x4', '\x2', '\x2', '\x37', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x44', '\x5', '\x12', '\n', '\x2', ':', '\x44', 
		'\x5', '\x10', '\t', '\x2', ';', '\x44', '\x5', '\x14', '\v', '\x2', '<', 
		'\x44', '\x5', '\x18', '\r', '\x2', '=', '\x44', '\x5', '\x1A', '\xE', 
		'\x2', '>', '\x44', '\x5', '\x1C', '\xF', '\x2', '?', '\x44', '\x5', '\n', 
		'\x6', '\x2', '@', '\x44', '\x5', '\xE', '\b', '\x2', '\x41', '\x44', 
		'\x5', '\f', '\a', '\x2', '\x42', '\x44', '\x5', '\b', '\x5', '\x2', '\x43', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x43', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x43', ';', '\x3', '\x2', '\x2', '\x2', '\x43', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '=', '\x3', '\x2', '\x2', '\x2', '\x43', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x19', '\x2', '\x2', '\x46', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\t', '\x2', '\x2', '\x2', 
		'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x17', '\x2', 
		'\x2', 'J', 'N', '\x5', '\"', '\x12', '\x2', 'K', 'M', '\x5', '\"', '\x12', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x18', '\x2', '\x2', 'R', 'V', '\x5', '\"', 
		'\x12', '\x2', 'S', 'U', '\x5', '\"', '\x12', '\x2', 'T', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', 
		']', '\a', '\x1A', '\x2', '\x2', 'Z', '\\', '\x5', '\"', '\x12', '\x2', 
		'[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', 
		'\x2', '^', '\x11', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\x5', '\x10', '\t', '\x2', '\x61', '\x62', 
		'\a', '\x15', '\x2', '\x2', '\x62', '\x63', '\a', '\x1A', '\x2', '\x2', 
		'\x63', '\x13', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\x16', 
		'\f', '\x2', '\x65', '\x66', '\a', '\x1A', '\x2', '\x2', '\x66', 'g', 
		'\a', '\x16', '\x2', '\x2', 'g', 'h', '\x5', '\"', '\x12', '\x2', 'h', 
		'\x15', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\t', '\x3', '\x2', '\x2', 
		'j', '\x17', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\v', '\x2', 
		'\x2', 'l', 'm', '\x5', '\x1E', '\x10', '\x2', 'm', 'n', '\a', '\x4', 
		'\x2', '\x2', 'n', 's', '\x5', '\x4', '\x3', '\x2', 'o', 'p', '\a', '\x4', 
		'\x2', '\x2', 'p', 'q', '\a', '\f', '\x2', '\x2', 'q', 'r', '\a', '\x4', 
		'\x2', '\x2', 'r', 't', '\x5', '\x4', '\x3', '\x2', 's', 'o', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\x4', '\x2', '\x2', 'v', 'w', '\a', '\xE', 
		'\x2', '\x2', 'w', '\x19', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 
		'\v', '\x2', '\x2', 'y', 'z', '\x5', '\x1E', '\x10', '\x2', 'z', '~', 
		'\a', '\x4', '\x2', '\x2', '{', '|', '\a', '\r', '\x2', '\x2', '|', '}', 
		'\a', '\x4', '\x2', '\x2', '}', '\x7F', '\x5', '\x4', '\x3', '\x2', '~', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x86', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\x4', '\x2', '\x2', '\x83', '\x84', '\a', '\f', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\x4', '\x2', '\x2', '\x85', '\x87', '\x5', 
		'\x4', '\x3', '\x2', '\x86', '\x82', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\x4', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\xE', '\x2', '\x2', '\x8A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\t', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x1E', '\x10', 
		'\x2', '\x8D', '\x8E', '\a', '\x4', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'\x4', '\x3', '\x2', '\x8F', '\x90', '\a', '\x4', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\n', '\x2', '\x2', '\x91', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x1A', '\x2', '\x2', '\x93', '\x94', '\x5', 
		' ', '\x11', '\x2', '\x94', '\x95', '\x5', '\"', '\x12', '\x2', '\x95', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\t', '\x4', '\x2', 
		'\x2', '\x97', '!', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9D', '\a', 
		'\x1B', '\x2', '\x2', '\x99', '\x9D', '\a', '\x1A', '\x2', '\x2', '\x9A', 
		'\x9D', '\x5', '$', '\x13', '\x2', '\x9B', '\x9D', '\a', '\x1C', '\x2', 
		'\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x1C', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\x3', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x1C', '\x2', '\x2', '\xA1', 
		'\xA2', '\a', '\x3', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x1C', '\x2', 
		'\x2', '\xA3', '%', '\x3', '\x2', '\x2', '\x2', '\xE', '(', '-', '\x33', 
		'\x37', '\x43', 'N', 'V', ']', 's', '\x80', '\x86', '\x9C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ConIntellisense.Core.Parser
